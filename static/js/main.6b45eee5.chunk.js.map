{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","loremPicsum.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","id","name","continent","coordinates","react_default","a","createElement","className","src","concat","alt","CardList","loremPicsum","map","place","i","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchfield","target","value","state","_this$state","filteredPicsum","filter","toLowerCase","includes","fontSize","fontWeight","components_SearchBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAeeA,EAbF,SAAAC,GAA0C,IAAvCC,EAAuCD,EAAvCC,GAAIC,EAAmCF,EAAnCE,KAAMC,EAA6BH,EAA7BG,UAAWC,EAAkBJ,EAAlBI,YACnC,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sDACXH,EAAAC,EAAAC,cAAA,OAAKE,IAAG,4BAAAC,OAA8BT,EAA9B,QAAwCU,IAAI,MACpDN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,mBAAmBN,GACjCG,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAAmBL,GAChCE,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAAmBJ,MCY3BQ,EAlBE,SAAAZ,GAAqB,IAAlBa,EAAkBb,EAAlBa,YAClB,OACER,EAAAC,EAAAC,cAAA,WAEIM,EAAYC,IAAI,SAACC,EAAOC,GACtB,OAAQX,EAAAC,EAAAC,cAACU,EAAD,CACNC,IAAKF,EACLf,GAAIY,EAAYG,GAAGf,GACnBC,KAAMW,EAAYG,GAAGd,KACrBC,UAAWU,EAAYG,GAAGb,UAC1BC,YAAaS,EAAYG,GAAGZ,kBCEzBe,EAbG,SAAAnB,GAAsB,IAAnBoB,EAAmBpB,EAAnBoB,aACnB,OACEf,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,SACEC,UAAU,oDACVa,KAAK,SACLC,YAAY,oBACZC,SAAUH,MCTLP,EAAc,CACzB,CACEZ,GAAI,KACJC,KAAM,uBACNC,UAAW,SACXC,YAAa,oCAEf,CACEH,GAAI,KACJC,KAAM,0BACNC,UAAW,UACXC,YAAa,sCAEf,CACEH,GAAI,KACJC,KAAM,qBACNC,UAAW,SACXC,YAAa,oCAEf,CACEH,GAAI,KACJC,KAAM,iCACNC,UAAW,gBACXC,YAAa,sCAEf,CACEH,GAAI,KACJC,KAAM,4BACNC,UAAW,gBACXC,YAAa,sCAEf,CACEH,GAAI,KACJC,KAAM,wBACNC,UAAW,gBACXC,YAAa,sCAEf,CACEH,GAAI,IACJC,KAAM,UACNC,UAAW,SACXC,YAAa,qCAEf,CACEH,GAAI,IACJC,KAAM,oBACNC,UAAW,SACXC,YAAa,oCAEf,CACEH,GAAI,IACJC,KAAM,yBACNC,UAAW,iBACXC,YAAa,qCAEf,CACEH,GAAI,IACJC,KAAM,qBACNC,UAAW,gBACXC,YAAa,qCAEf,CACEH,GAAI,KACJC,KAAM,8BACNC,UAAW,gBACXC,YAAa,sCAEf,CACEH,GAAI,IACJC,KAAM,sBACNC,UAAW,SACXC,YAAa,oCAEf,CACEH,GAAI,IACJC,KAAM,wCACNC,UAAW,gBACXC,YAAa,qCAEf,CACEH,GAAI,IACJC,KAAM,kBACNC,UAAW,OACXC,YAAa,qCAEf,CACEH,GAAI,IACJC,KAAM,sBACNC,UAAW,UACXC,YAAa,sCAEf,CACEH,GAAI,IACJC,KAAM,oBACNC,UAAW,gBACXC,YAAa,0CAEf,CACEH,GAAI,IACJC,KAAM,oBACNC,UAAW,OACXC,YAAa,sCC3FFoB,EARA,SAACC,GACd,OACEpB,EAAAC,EAAAC,cAAA,OAAKmB,MAAO,CAAEC,UAAW,SAAUC,OAAQ,oBAAqBC,OAAQ,SAAUrB,UAAU,OACzFiB,EAAMK,WCmCEC,qBAhCb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAOFI,eAAiB,SAACC,GAChBR,EAAKS,SAAS,CAAEC,YAAaF,EAAMG,OAAOC,SAP1CZ,EAAKa,MAAQ,CACXhC,YAAaA,EACb6B,YAAa,IAJHV,wEAYL,IAAAc,EAC8BX,KAAKU,MAAlChC,EADDiC,EACCjC,YAAa6B,EADdI,EACcJ,YACfK,EAAiBlC,EAAYmC,OAAO,SAAAnC,GACxC,OAAOA,EAAYX,KAAK+C,cAAcC,SAASR,EAAYO,iBAE7D,OACE5C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,MAAImB,MAAO,CAAEyB,SAAU,QAASC,WAAY,WAAY5C,UAAU,kBAAlE,gBACAH,EAAAC,EAAAC,cAAC8C,EAAD,CAAWjC,aAAce,KAAKI,kBAEhClC,EAAAC,EAAAC,cAAC+C,EAAD,KACEjD,EAAAC,EAAAC,cAACgD,EAAD,CAAU1C,YAAakC,aAzBfS,cCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.6b45eee5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({ id, name, continent, coordinates }) => {\r\n  return (\r\n    <div className='tc bg-dark-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n        <img src={`https://picsum.photos/id/${id}/210`} alt=\"#\" />\r\n        <div>\r\n          <h2 className='washed-green f5'>{name}</h2>\r\n          <p className='washed-green f6'>{continent}</p>\r\n          <p className='washed-green f6'>{coordinates}</p>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ loremPicsum }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        loremPicsum.map((place, i) => {\r\n          return (<Card \r\n            key={i} \r\n            id={loremPicsum[i].id} \r\n            name={loremPicsum[i].name}\r\n            continent={loremPicsum[i].continent} \r\n            coordinates={loremPicsum[i].coordinates}\r\n          />);\r\n        })\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return (\r\n    <div className='pa2'>\r\n      <input \r\n        className='pa3 ba b--washed-green bg-dark-green washed-green'\r\n        type='search' \r\n        placeholder='Search for places' \r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBox;","export const loremPicsum = [\n  {\n    id: 1015,\n    name: 'Preikestolen, Norway',\n    continent: 'Europe',\n    coordinates: '58°59\\'11.9\"N 6°11\\'23.0\"E'\n  },\n  {\n    id: 1016,\n    name: 'Kings Canyon, Australia',\n    continent: 'Oceania',\n    coordinates: '24°16\\'44.7\"S 131°31\\'02.6\"E'\n  },\n  {\n    id: 1018,\n    name: 'Quiraing, Scotland',\n    continent: 'Europe',\n    coordinates: '57°38\\'33.2\"N 6°15\\'51.1\"W'\n  },\n  {\n    id: 1020,\n    name: 'Yellowstone National Park, USA',\n    continent: 'North-America',\n    coordinates: '44°32\\'31.0\"N 110°31\\'31.4\"W'\n  },\n  {\n    id: 1022,\n    name: 'Denali National Park, USA',\n    continent: 'North-America',\n    coordinates: '62°59\\'15.0\"N 151°08\\'28.6\"W'\n  },\n  {\n    id: 1039,\n    name: 'Salt Creek Falls, USA',\n    continent: 'North-America',\n    coordinates: '43°36\\'34.6\"N 122°07\\'44.2\"W'\n  },\n  {\n    id: 393,\n    name: 'Iceland',\n    continent: 'Europe',\n    coordinates: '64°50\\'26.7\"N 18°21\\'52.0\"W'\n  },\n  {\n    id: 483,\n    name: 'Odemira, Portugal',\n    continent: 'Europe',\n    coordinates: '37°35\\'55.6\"N 8°46\\'21.1\"W'\n  },\n  {\n    id: 523,\n    name: 'Mount Bromo, Indonesia',\n    continent: 'Southeast Asia',\n    coordinates: '7°56\\'36.8\"S 112°57\\'12.9\"E'\n  },\n  {\n    id: 779,\n    name: 'Machu Picchu, Peru',\n    continent: 'South-America',\n    coordinates: '13°09\\'47.1\"S 72°32\\'42.6\"W'\n  },\n  {\n    id: 1043,\n    name: 'Yosemite National Park, USA',\n    continent: 'North-America',\n    coordinates: '37°50\\'42.0\"N 119°31\\'54.9\"W'\n  },\n  {\n    id: 424,\n    name: 'Buchenbach, Germany',\n    continent: 'Europe',\n    coordinates: '47°57\\'24.0\"N 8°01\\'16.8\"E'\n  },\n  {\n    id: 894,\n    name: 'Los Flamencos National Reserve, Chile',\n    continent: 'South-America',\n    coordinates: '23°12\\'37.4\"S 67°32\\'04.1\"W'\n  },\n  {\n    id: 921,\n    name: 'Balok, Malaysia',\n    continent: 'Asia',\n    coordinates: '3°58\\'59.9\"N 103°22\\'27.0\"E'\n  },\n  {\n    id: 477,\n    name: 'Wanaka, New-Zealand',\n    continent: 'Oceania',\n    coordinates: '44°42\\'22.9\"S 169°08\\'19.8\"E'\n  },\n  {\n    id: 829,\n    name: 'Bryce Canyon, USA',\n    continent: 'North-America',\n    coordinates: '37°37\\'42″N 112°10\\'04″W'\n  },\n  {\n    id: 780,\n    name: 'Linzhi Shi, China',\n    continent: 'Asia',\n    coordinates: '29°36\\'36.3\"N 94°33\\'22.4\"E'\n  }\n];\n","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n  return (\r\n    <div style={{ overflowY: 'scroll', border: '1px solid #137752', height: '500px'}} className='pt3'>\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport { loremPicsum } from '../loremPicsum';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      loremPicsum: loremPicsum,\r\n      searchfield: ''\r\n    };\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    this.setState({ searchfield: event.target.value });\r\n  }\r\n\r\n  render() {\r\n    const { loremPicsum, searchfield } = this.state;\r\n    const filteredPicsum = loremPicsum.filter(loremPicsum => {\r\n      return loremPicsum.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    });\r\n    return (\r\n      <div className='tc'>\r\n        <div className='mv3'>\r\n          <h1 style={{ fontSize: '5.5em', fontWeight: 'lighter'}} className='ma4 dark-green'>Travel Plans</h1>\r\n          <SearchBox searchChange={this.onSearchChange}/>\r\n        </div>\r\n        <Scroll>\r\n          <CardList loremPicsum={filteredPicsum}/>\r\n        </Scroll>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}